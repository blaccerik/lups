version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: lups/.
      dockerfile: Dockerfile
    networks:
      - lups
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./letsencrypt:/etc/letsencrypt
  flask:
    container_name: flask
    build:
      context: flaskr/.
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRE_USER=erik
      - POSTGRE_PASSWORD=erik
      - POSTGRE_BROKER_URL=postgres:5432
      - POSTGRE_DATABASE=erik_db
      - PROD=True
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - postgres
    volumes:
      - image_data:/usr/src/app/images
    networks:
      - lups

  worker:
    container_name: worker
    build:
      context: ./
      dockerfile: celeryr/dockerfile
    command: celery --app worker.tasks.celery worker --concurrency=1
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRE_USER=erik
      - POSTGRE_PASSWORD=erik
      - POSTGRE_BROKER_URL=postgres:5432
      - POSTGRE_DATABASE=erik_db
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          cpus: '1'  # Adjust the CPU limit as needed
          memory: 2G  # Adjust the memory limit as needed
    networks:
      - lups

  redis:
    container_name: redis
    image: redis:6-alpine
    ports:
      - "6379:6379"
    networks:
      - lups

  postgres:
    container_name: erik_db
    image: postgres:alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: erik_db
      POSTGRES_USER: erik
      POSTGRES_PASSWORD: erik
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lups

networks:
  lups:
    driver: bridge

volumes:
  cert_data:
  postgres_data:
  image_data:
