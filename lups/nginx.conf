worker_processes auto;

events {
    worker_connections 1024;
}

http {


    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Compression level (1-9), 6 is a good compromise between speed and compression
    gzip_comp_level 6;

    # Minimum file size to compress (in bytes)
    gzip_min_length 1000;

    # Enable gzip static for assets that don't change frequently
    gzip_static on;

    # Compression buffer size (should match your CPU's L2/L3 cache size)
    gzip_buffers 16 8k;

    # Compression window size
    gzip_window 32;

    # Compression level for HTTP/2 requests
    gzip_http_version 1.1;

    # Add Vary header to indicate that the response may vary based on the Accept-Encoding header
    gzip_vary on;

    # Specify which response status codes to compress (optional)
    gzip_http_version 1.1;
    gzip_disable "MSIE [1-6]\.";
    # Set the MIME types that Nginx will recognize
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$sent_http_x_api_call" "$sent_http_x_api_call_e" "$request_uri"';

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    add_header 'Access-Control-Allow-Origin' '*' always;
    server {
        listen 80;
        server_name lyps.ee;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        add_header X-Api-Call-E "SECURE CONNECTION" always;
        server_name lyps.ee;
        root /var/www/html;
        index index.html;
        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/lyps.ee/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/lyps.ee/privkey.pem;


        location /socket.io {
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_pass http://flask:5000/socket.io;
            add_header X-Api-Call "ws got hit" always;
        }

        location /api/ {
            proxy_pass http://flask:5000;  # Assuming your Flask container is named "flask" and running on port 5000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            add_header X-Api-Call "api was called" always;
        }
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Specify access and error log files
        access_log  /var/log/nginx/access.log main;
        error_log   /var/log/nginx/error.log;
    }
}
